### This is R codes! ###
### 1. Data Preparation ###

# Set up the path for installing packages
.libPaths('C:/Users/james/anaconda3/envs/r-tutorial/Lib/R/library')

# Load packages
library(data.table)
library(skimr)
library(naniar)
library(dplyr)
library(tidyr)
library(magrittr)
library(ggplot2)
library(plotly)
library(MASS)
library(yardstick)
library(janitor)

# Set up the working directory
setwd('C:/Users/james/Desktop/Coding/Kaggle/powerball')

# Load a target dataset
df_raw <- fread('powerball.csv')
head(df_raw)
tail(df_raw)

### 2. Data Cleaning: Missing value treatment ###
# Check out the structure of the dataset
str(df_raw)

# Check out missing values
miss_var_summary(df_raw)

# Replace missing values with 0
df_raw[is.na(df_raw)] <- 0
miss_var_summary(df_raw)

# Drop columns
df <- subset(df_raw, select = -c(1, 8, 9))

# Change column names
names(df)[names(df) == "Number 1"] <- "n1"
names(df)[names(df) == "Number 2"] <- "n2"
names(df)[names(df) == "Number 3"] <- "n3"
names(df)[names(df) == "Number 4"] <- "n4"
names(df)[names(df) == "Number 5"] <- "n5"
names(df)[names(df) == "Powerball"] <- "pb"

# Add new rows
nov_4_7 <- c(23, 32, 33, 45, 49, 14, 14, 16, 37, 48, 58, 18)
nov_new_df <- as.data.frame(matrix(nov_4_7, byrow = TRUE, nrow = 2))
colnames(nov_new_df) <- c("n1", "n2", "n3", "n4", "n5", "pb")

# Combine new df to main df
df <- rbind(nov_new_df, df)
head(df)

### 3. Probabilistic Predictions using Multiple Logistic Regression ###
# Create a dataframe filled with binary value of 1 (1: win, 0: lose)
df_result <- as.data.frame(rep(c(1), time=1508))
colnames(df_result) <- c("result")

# Merge df_result to main dataset: df
df$result <- paste(df_result$result)

# Convert character to integer
df$result <- as.integer(df$result)
head(df)

# Create a dataset that generates dummy values that will be used for predictions
df_dummy_raw <- data.frame(matrix(nrow=10000, ncol=7))
colnames(df_dummy_raw) <- c("idx", "n1", "n2", "n3", "n4", "n5", "pb")

for (i in 1:10000) {
    num_wb <- sample(1:69, 5, replace=FALSE)
    num_rb <- sample(1:26, 1, replace=FALSE)
    
    for (j in 1:5) {
    df_dummy_raw[i, 1] = i
    df_dummy_raw[i, 2:6] = num_wb
    df_dummy_raw[i, 7] = num_rb
    }
}

head(df_dummy_raw)

# Drop a index column in df_dummy dataset
df_dummy <- subset(df_dummy_raw, select=-c(1))

# Add a result column filled with 0
df_dummy_result <- as.data.frame(rep(c(0), time=10000))

# Change a column name
colnames(df_dummy_result) <- c("result")

# Merge df_result to a dataset: df_dummy_1
df_dummy$result <- paste(df_dummy_result$result)

# Convert character to integer
df_dummy$result <- as.integer(df_dummy$result)

# Merge df_dummy_1 into df
df_all <- rbind(df, df_dummy)

head(df_all)

# Summary for a combined dataset: df_all
skimr::skim(df_all)

# Check duplicates in each row
get_dupes(df_all, n1, n2, n3, n4, n5)

# Fit a logistic regression model
mdl <- glm(result ~ n1 + n2 + n3 + n4 + n5 + pb,
                    data = df_all,
                    family = binomial(link="logit"))

# Summary results of the model 
round(summary(mdl)$coef, digits=5)

# Obtain the actual powerball results and predicted results by the model
actual_result <- df_all$result
predicted_result <- round(fitted(mdl))

# Tabulate both responses
outcomes <- table(predicted_result, actual_result)
outcomes

# Convert the table into a yardstick confusion matrix object using conf_mat()
confusion <- conf_mat(outcomes)

# Gain the major model performance metrics
summary(confusion, event_level = "second")[1:4, ]

### 4. Generating Powerball Numbers ###
# Create a dataframe that contains 1000 sets of random numbers
df_draw_raw <- data.frame(matrix(nrow=1000, ncol=7))
colnames(df_draw_raw) <- c("idx", "n1", "n2", "n3", "n4", "n5", "pb")

for (i in 1:1000) {
    num_wb <- sample(1:69, 5, replace=FALSE)
    num_rb <- sample(1:26, 1, replace=FALSE)
    
    for (j in 1:5) {
    df_draw_raw[i, 1] = i
    df_draw_raw[i, 2:6] = num_wb
    df_draw_raw[i, 7] = num_rb
    }
}

# Drop the column: idx
df_draw <- subset(df_draw_raw, select = -c(1))

# Check out duplicates
df_draw %>%
    get_dupes(-c(pb))

# Get the head of the dataset
head(df_draw)

# Create a dataframe that provides numbers that have a probability of more than 0.35
pred_result <- data.frame(matrix(nrow=1000, ncol=8))
colnames(pred_result) <- c("n1", "n2", "n3", "n4", "n5", "pb", "prob", "result")

prob <- rep(NA, nrow(df_draw))
result <- rep(NA, nrow(df_draw))

for (i in 1:nrow(df_draw)) {
    prob = predict(mdl, df_draw[i, ], type='response')
    
    if (prob <= .35) {
        result[i] = 0
    }
    else {
        result[i] = 1
    }
    
    pred_result[i, 1:6] = df_draw[i, 1:6]
    pred_result[i, 7] = prob
    pred_result[i, 8] = result[i]
    pred_result_win <- subset(pred_result, result == 1)    
}

head(pred_result_win, n=10)
